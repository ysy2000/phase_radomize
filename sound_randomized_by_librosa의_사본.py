# -*- coding: utf-8 -*-
"""sound_randomized_by_librosa의 사본

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1A1hxRvbZhldjFmUqCNkgoUeI8y862pQt
"""

import matplotlib.pyplot as plt
import numpy as np
import soundfile as sf
import math
import librosa
import librosa.display
import wave

# !pip install librosa

# !pip install torchaudio
from google.colab import drive
drive.mount('/content/drive')

file_path = '/content/drive/My Drive/Colab Notebooks/cut_violinA4.wav'

fig_size = (15, 10)
data, sr = librosa.load(file_path, sr = None)
print(sr, data.shape)

plt.figure(figsize=fig_size)
librosa.display.waveplot(data, sr, alpha=0.4)
plt.xlabel("Time(s)")
plt.ylabel("Amplitude")
plt.title("waveform")

# plot
arr = [0,0]
for i in range(441-2):
  arr.append(data[i+10000])

times = np.arange(0, 0.01, 1/sr)
plt.plot(times, arr)

fft = np.fft.fft(data)
print("fft shape:", fft.shape)

spectrum = np.abs(fft)
print("spectrum shape:", spectrum.shape)

freq = np.linspace(0, sr, len(spectrum))
print("frequency shape:", freq.shape)

half_spectrum = spectrum[:int(len(spectrum)/2)]
half_freq = freq[:int(len(spectrum)/2)]
print('half_spectrum shape: ', half_spectrum.shape)
print("half frequency shape:", half_freq.shape)

plt.figure(figsize = fig_size)
plt.plot(half_freq, half_spectrum, alpha = 0.4)
plt.xlabel("Frequency(Hz)")
plt.ylabel("Magnitude")
plt.title("Power spectrum")
plt.axvline(x=440, color='r', linestyle='--', alpha = 0.4)
plt.axvline(x=440*2, color='r', linestyle='--', alpha = 0.4)
plt.axvline(x=440*3, color='r', linestyle='--', alpha = 0.4)

phase = np.angle(fft)*180/np.pi
print("phase shape:", phase.shape)

angle = np.linspace(0, sr, len(phase))
print("angle shape:", angle.shape)

half_phase = phase[:int(len(phase)/2)]
half_angle = angle[:int(len(phase)/2)] 
print("half phase shape:", half_phase.shape)
print("half angle shape:", half_angle.shape)

plt.figure(figsize = fig_size)
plt.plot(half_angle, half_phase, alpha = 0.4)
plt.xlabel("Frequency(Hz)")
plt.ylabel("phase")
plt.title("Phase")

# plt.axvline(x=440, color='r', linestyle='--')

half_phase = 180 * np.random.rand(len(half_phase))

plt.figure(figsize = fig_size)
plt.plot(half_angle, half_phase, alpha = 0.4)
plt.xlabel("Frequency(Hz)")
plt.ylabel("phase")
plt.title("Phase")

# plt.axvline(x=440, color='r', linestyle='--')

new_furier_data = spectrum*np.exp(-1j*np.pi*phase)
new_data = np.fft.ifft(new_furier_data)

plt.figure(figsize=fig_size)
librosa.display.waveplot(abs(new_data), sr, alpha=0.4)
plt.xlabel("Time(s)")
plt.ylabel("Amplitude")
plt.title("waveform")


